binary_sensor:
  - platform: template
    sensors:
      allow_automation:
        friendly_name: "Allow Automation"
        value_template: "{{ is_state('input_boolean.allow_automation_execution', 'on') }}"

      system_ready:
        friendly_name: "System ready"
        value_template: "{{ is_state('input_boolean.system_ready', 'on') }}"
        device_class: moving

sensor:
  ##########
  # SENSORS
  ##########
  - platform: filesize
    file_paths:
      - /config/home-assistant_v2.db
      - /config/home-assistant.log

  - platform: moon

  - platform: rest
    name: freenas_system_info
    json_attributes:
      - version
      - uptime
      - loadavg
    resource: https://freenas.home.bealetech.com/api/v2.0/system/info
    value_template: '{{ value_json.version}}'
    username: !secret freenas_username
    password: !secret freenas_passwd
    authentication: basic
    headers:
      Content-Type: application/json

  - platform: systemmonitor
    resources:
      - type: disk_use_percent
        arg: /
      - type: memory_use_percent
      - type: swap_use_percent
      - type: processor_use

  - platform: time_date
    display_options:
      ['time', 'date']

  - platform: uptime
    unit_of_measurement: minutes

  - platform: version
    name: hass_version_installed

  - platform: version
    name: hass_version_latest
    source: docker

  - platform: version
    name: hass_version_latest_beta
    beta: true
    source: docker

  ##########
  # TEMPLATES
  ##########
  - platform: template
    sensors:
      ##########
      # Information
      ##########
      hass_uptime:
        friendly_name: Last restart
        icon_template: mdi:update
        value_template: >
          {% set uptime = states('sensor.uptime') | float %}
          {% if uptime < 1 %} {{ (uptime * 60) | int }} seconds ago
          {% elif uptime | int == 1 %} 1 minute ago
          {% elif uptime | int > 1 %}
            {% if uptime | int < 60 %} {{ uptime | int }} minutes ago
            {% elif uptime | int / 60 == 24 %} {{ (uptime | int / 60 / 24) | int }} day ago
            {% elif uptime | int / 60 >= 24 %} {{ (uptime | int / 60 / 24) | int }} days ago
            {% elif uptime | int >= 60 and uptime | int < 120 %} {{ (uptime | int / 60) | int }} an hour ago
            {% elif uptime | int >= 120 %} {{ (uptime | int / 60) | int }} hours ago
            {% endif %}
          {% endif %}

      hass_version:
        icon_template: mdi:home-assistant
        friendly_name_template: >
          Installed {{ states('sensor.hass_version_installed') }}
        value_template: >
          {{ 'Latest' if states('sensor.hass_version_installed') == 
          states('sensor.hass_version_latest') else states('sensor.hass_version_latest') }}

      placeholder:
        value_template: ' '

      ##########
      # FreeNAS
      ##########
      freenas_version:
        friendly_name: Version
        value_template: >
          {{ state_attr('sensor.freenas_system_info', 'version') }}

      freenas_loadavg:
        friendly_name: Load (1m/5m/15m)
        value_template: >
          {% set loadavg = state_attr('sensor.freenas_system_info', 'loadavg') %}
          {% set avg_1 = 0.0 %}
          {% set avg_5 = 0.0 %}
          {% set avg_15 = 0.0 %}
          {% if loadavg|length == 3 %}
            {% set avg_1 = loadavg[0] %}
            {% set avg_5 = loadavg[1] %}
            {% set avg_15 = loadavg[2] %}
          {% elif loadavg|length == 2 %}
            {% set avg_1 = loadavg[0] %}
            {% set avg_5 = loadavg[1] %}
          {% elif loadavg|length == 2 %}
            {% set avg_1 = loadavg[0] %}
          {% endif %}
          {{ "%2.2f" % avg_1 }} / {{ "%2.2f" % avg_5 }} / {{ "%2.2f" % avg_15 }} 

      freenas_uptime:
        friendly_name: Uptime
        value_template: >
          {{ state_attr('sensor.freenas_system_info', 'uptime') }}

      ##########
      # Sidebar
      ##########      
      sidebar_day:
        icon_template: mdi:calendar
        value_template: >
          {% set weekday = as_local(states.sensor.date.last_changed).strftime('%w') | int %}
          {% set days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] %}
          {{ days[weekday - 1] }}

      sidebar_date:
        icon_template: mdi:calendar
        value_template: >
          {% set month = as_local(states.sensor.date.last_changed).strftime('%m') | int %}
          {% set day = as_local(states.sensor.date.last_changed).strftime('%d') | int %}
          {% set months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'] %}
          {{ day }} {{ months[month - 1] }}

      sidebar_greeting:
        value_template: >
          {% set time = as_timestamp(states.sensor.time.last_changed | as_local) | timestamp_custom('%H') | int %}
          {% if time < 5 %} Good night
          {% elif time < 12 %} Good morning
          {% elif time < 17 %} Good afternoon
          {% elif time < 19 %} Good evening
          {% elif time < 22 %} Good night
          {% else %} Good evening
          {% endif %}

      sidebar_active:
        value_template: >
          {% set lights = [states.light.dining_room_light, states.light.end_table_lamp, states.light.floor_lamp, states.light.kitchen_lights_level, states.light.kitchen_cabinet_lights_level, states.light.wine_fridge] %}
          {% set lights_on = lights | selectattr('state','eq','on') | list %}
          {% set lights_name = lights | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}

          {% set switches = [states.switch.esspresso_machine, states.switch.leviton_dzpa1_2bw_plug_in_outlet_switch] %}
          {% set switches_on = switches | selectattr('state','eq','on') | list %} 
          {% set switches_name = switches | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}

          {% if (lights_on | length == 0) and (switches_on | length == 1) %} 
          {{ switches_name }} is on

          {% elif (lights_on | length == 0) and (switches_on | length > 1) %} 
          {{ switches_name | regex_replace(',([^,]*)$',' and\\1') }} are on

          {% elif (lights_on | length == 1) and (switches_on | length == 1) %}
          {{ lights_name }} and {{switches_name }} are on

          {% elif (lights_on | length == 1) and (switches_on | length > 1) %}
          {{ lights_name }}, {{ switches_name | regex_replace(',([^,]*)$',' and\\1') }} are on

          {% elif (lights_on | length > 1) and (switches_on | length == 1) %}
          {{ lights_on | length }} lights and {{ switches_name }} are on

          {% elif (lights_on | length > 1) and (switches_on | length > 1) %}
          {{ lights_on | length }} lights, {{ switches_name | regex_replace(',([^,]*)$',' and\\1') }} are on

          {% elif (lights_on | length == 1) and (switches_on | length == 0) %}
          {{ lights_name }} is on

          {% elif (lights_on | length > 1) and (switches_on | length == 0) %}
          {{ lights_on | length}} lights are on

          {% else %} 
          <font color='#6a7377'>Everything is off</font> 
          {% endif %}

          {% if is_state('cover.atrium_sliding_door', 'open') %}
          Atrium is open
          {% endif %}

          {% if is_state('cover.garage_door', 'open') %}
          <b>Garage door is open</b>
          {% endif %}

      sidebar_vacuum:
        value_template: >
          {% set david_id = 'vacuum.david' %}
          {% set dustin_id = 'vacuum.dustin' %}

          {% if states(david_id) in ['cleaning', 'returning'] %}
            {% if states(david_id) == states(dustin_id) %}
              David and Dustin are {{states('sensor.vacuum_status_david')}}
            {% elif states(dustin_id) in ['cleaning', 'error'] %}
              David is {{states('sensor.vacuum_status_david')}} and Dustin is {{states('sensor.vacuum_status_dustin')}}
            {% else %}
              David is {{states('sensor.vacuum_status_david')}}
            {% endif %}
          {% elif is_state(david_id, 'error') %}
            {% if states(dustin_id) in ['cleaning', 'returning', 'error'] %}
              David is {{states('sensor.vacuum_status_david')}} and Dustin is {{states('sensor.vacuum_status_dustin')}}
            {% else %}
              David is {{states('sensor.vacuum_status_david')}}
            {% endif %}
          {% elif states(dustin_id) in ['cleaning', 'returning', 'error'] %}
            Dustin is {{states('sensor.vacuum_status_dustin')}}
          {% endif %}

          {% if (states(david_id) not in ['cleaning', 'returning']) and is_state('binary_sensor.david_bin_full', 'on') %}
            David's bin is full!
          {% endif %}
          {% if (states(dustin_id) not in ['cleaning', 'returning']) and is_state('binary_sensor.dustin_bin_full', 'on') %}
            Dustin's bin is full!
          {% endif %}

      ##########
      # Vacuum
      ##########
      vacuum_status_david:
        value_template: >
          {% set entity_id = 'vacuum.david' %}
          {% if is_state(entity_id, 'returning') %} done
          {% elif is_state(entity_id, 'error') %} {{state_attr(entity_id, 'status')|lower}}
          {% else %} {{states(entity_id)}}
          {% endif %}

      vacuum_status_dustin:
        value_template: >
          {% set entity_id = 'vacuum.dustin' %}
          {% if is_state(entity_id, 'returning') %} done
          {% elif is_state(entity_id, 'error') %} {{state_attr(entity_id, 'status')|lower}}
          {% else %} {{states(entity_id)}}
          {% endif %}

      vacuum_cleaned_area_david:
        friendly_name: "Cleaned"
        value_template: >
          {% set entity_id = 'vacuum.david' %}
          {% if states(entity_id) in ['cleaning', 'returning'] %} {{ state_attr(entity_id, 'cleaned_area') }} ft^2
          {% endif %}

      vacuum_cleaned_area_dustin:
        friendly_name: "Cleaned"
        value_template: >
          {% set entity_id = 'vacuum.dustin' %}
          {% if states(entity_id) in ['cleaning', 'returning'] %} {{ state_attr(entity_id, 'cleaned_area') }} ft^2
          {% endif %}

      vacuum_cleaning_time_david:
        friendly_name: "Cleaning time"
        value_template: >
          {% set entity_id = 'vacuum.david' %}
          {% if states(entity_id) in ['cleaning', 'returning'] %} {{ state_attr(entity_id, 'cleaning_time') }} mins
          {% endif %}

      vacuum_cleaning_time_dustin:
        friendly_name: "Cleaning time"
        value_template: >
          {% set entity_id = 'vacuum.dustin' %}
          {% if states(entity_id) in ['cleaning', 'returning'] %} {{ state_attr(entity_id, 'cleaning_time') }} mins
          {% endif %}

      ##########
      # Weather
      ##########
      weather_wind_direction:
        value_template: >
          {% set wind_direction = states('sensor.wind_direction')|int %}
          {% if wind_direction < 12 %}
            N
          {% elif wind_direction >= 12 and wind_direction < 34 %}
            NNE
          {% elif wind_direction >= 34 and wind_direction < 56 %}
            NE
          {% elif wind_direction >= 56 and wind_direction < 78 %}
            ENE
          {% elif wind_direction >= 78 and wind_direction < 102 %}
            E
          {% elif wind_direction >= 102 and wind_direction < 124 %}
            ESE
          {% elif wind_direction >= 124 and wind_direction < 146 %}
            SE
          {% elif wind_direction >= 146 and wind_direction < 168 %}
            SSE
          {% elif wind_direction >= 168 and wind_direction < 192 %}
            S
          {% elif wind_direction >= 192 and wind_direction < 214 %}
            SSW
          {% elif wind_direction >= 214 and wind_direction < 236 %}
            SW
          {% elif wind_direction >= 236 and wind_direction < 258 %}
            WSW
          {% elif wind_direction >= 258 and wind_direction < 282 %}
            W
          {% elif wind_direction >= 282 and wind_direction < 304 %}
            WNW
          {% elif wind_direction >= 304 and wind_direction < 326 %}
            NW
          {% elif wind_direction >= 326 and wind_direction < 348 %}
            NNW
          {% elif wind_direction >= 348 %}
            N
          {% endif %}
